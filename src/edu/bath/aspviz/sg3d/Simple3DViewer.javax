package edu.bath.aspviz.sg3d;

import static org.junit.Assert.assertTrue;

import java.awt.Frame;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.media.opengl.GL;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.GLCapabilities;
import javax.media.opengl.GLDrawable;
import javax.media.opengl.GLEventListener;
import javax.media.opengl.glu.GLU;

import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.CommonTokenStream;

import edu.bath.asplib.model.ProblemRun;
import edu.bath.asplib.model.as.AnswerSet;
import edu.bath.asplib.parser.SmodelsLexer;
import edu.bath.asplib.parser.SmodelsParser;

public class Simple3DViewer {
	Frame frame;
	GLCanvas canvas;
	GLNode rootNode;
	double rx, ry, rz;

	public GLNode getRootNode() {
		return rootNode;
	}

	public void setRootNode(GLNode rootNode) {
		this.rootNode = rootNode;
	}

	class DefaultGLEventListener implements GLEventListener {
		private final GLU glu = new GLU();

		GLDrawWalker dw = new GLDrawWalker();

		@Override
		public void display(GLAutoDrawable drawable) {
			if (rootNode == null)
				return;
			System.err.println("draw called");
			GL gl = drawable.getGL();
			gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
			gl.glLoadIdentity();
			gl.glTranslated(0, 0, -30);

			gl.glRotated(rx, 1, 0, 0);
			gl.glRotated(ry, 0, 1, 0);

			dw.draw(drawable.getGL(), rootNode);
		}

		@Override
		public void displayChanged(GLAutoDrawable arg0, boolean arg1,
				boolean arg2) {
			canvas.repaint();
		}

		@Override
		public void reshape(GLAutoDrawable glDrawable, int x, int y, int width,
				int height) {
			final GL gl = glDrawable.getGL();
			if (height <= 0) {
				height = 1;
			}
			float h = (float) width / (float) height;
			gl.glMatrixMode(GL.GL_PROJECTION);
			gl.glLoadIdentity();
			glu.gluPerspective(40.0f, h, 1.0, 1000.0);
			gl.glMatrixMode(GL.GL_MODELVIEW);
			canvas.repaint();

		}

		@Override
		public void init(GLAutoDrawable drawable) {
			final GL gl = drawable.getGL();

			final GLU glu = new GLU();
			gl.glShadeModel(GL.GL_SMOOTH);
			gl.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
			gl.glClearDepth(1.0f); // Depth Buffer Setup
			gl.glEnable(GL.GL_DEPTH_TEST); // Enables Depth Testing
			gl.glDepthFunc(GL.GL_LEQUAL); // The Type Of Depth Testing To Do
			gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT, GL.GL_NICEST); // Really
			gl.glEnable(GL.GL_LIGHTING);

			gl.glEnable(GL.GL_TEXTURE_2D);
		//	gl.glLightfv(GL.GL_LIGHT1, GL.GL_AMBIENT, new float[] { 0.5f, 0.5f,
		//			0.5f, 1.0f }, 0);
			gl.glLightfv(GL.GL_LIGHT1, GL.GL_DIFFUSE, new float[] { 1.0f, 1.0f,
					1.0f, 1.0f }, 0);
			gl.glLightfv(GL.GL_LIGHT1, GL.GL_POSITION, new float[] { 10.0f,
					10.0f, 10.0f, 1.0f }, 0);
			gl.glEnable(GL.GL_LIGHT1);
			gl.glEnable(GL.GL_LIGHTING);
			// Perspective
			// Calculations
			// gl.glClearDepth(1.0f);
			// gl.glEnable(GL.GL_DEPTH_TEST);
			// gl.glDepthFunc(GL.GL_LEQUAL);
			// gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT, GL.GL_NICEST);
		}
	}

	public Simple3DViewer() {
		frame = new Frame();
		GLCapabilities cap = new GLCapabilities();
		cap.setDoubleBuffered(true);
		cap.setDepthBits(24);
		cap.setHardwareAccelerated(true);
		canvas = new GLCanvas(cap);
		canvas.addGLEventListener(new DefaultGLEventListener());
		canvas.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				switch (e.getKeyChar()) {
				case 'a':
					rx += 10;
					break;
				case 'z':
					rx -= 10;
					break;
				case 's':
					ry += 10;
					break;
				case 'd':
					ry -= 10;
					break;
				}

				canvas.repaint();
			}
		});
		canvas.addMouseListener(new MouseAdapter() {
			boolean dragging = false;

			int dragX = 0;
			int dragY = 0;

			@Override
			public void mousePressed(MouseEvent e) {
				System.err.println("Mouse down");
				dragging = true;
				dragX = e.getX();
				dragY = e.getY();
				canvas.repaint();

			}

			@Override
			public void mouseReleased(MouseEvent e) {
				dragging = false;
				dragX = dragY = 0;
				System.err.println("Mouse up");
				canvas.repaint();
			}

			@Override
			public void mouseMoved(MouseEvent e) {
				if (dragging) {
					int dx = dragX - e.getX();
					int dy = dragY - e.getY();
					rx += (double) dx;
					ry += (double) dy;
					System.err.println("Mouse drag " + dx + ": " + dy);

				}
			}

			@Override
			public void mouseDragged(MouseEvent e) {
				// TODO Auto-generated method stub
				System.err.println("Mouse drag ");

				super.mouseDragged(e);
			}
		});
		// canvas.setAutoSwapBufferMode(true);
		frame.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});
		canvas.setSize(640, 480);
		frame.add(canvas);
		frame.pack();
		frame.show();
	}

	public void setUpvisual(GLAutoDrawable glDrawable) {
	}

	public static void main(String[] args) {
		try {
			Simple3DViewer viewer = new Simple3DViewer();
			SmodelsParser parser;
			SmodelsLexer lexer;
			lexer = new SmodelsLexer(new ANTLRFileStream(
					"testdata/testans1.smodels"));
			parser = new SmodelsParser(new CommonTokenStream(lexer));
			parser.top();
			ProblemRun pr = parser.getProblemRun();
			assertTrue(pr.getAnswerSets().size() == 1);
			AnswerSet as = pr.getAnswerSets().get(0);
			System.err.println("rendering  " + as);
			Sg3dSceneGraphBuilder buld = new Sg3dSceneGraphBuilder();
			GLNode topNode = buld.buildSceneGraph(as);

			// GLNode root = new GLNode();
			// root.addChild(
			// new GLNode().addTransform(new Translate(3, 1, 3)).addShape(
			// new GLCube())).addChild(
			// new GLNode().addTransform(new Translate(-1, -1, -2))
			// .addTransform(new Rotate(30, 1, 0, 0)).addShape(
			// new GLCube())).addTransform(
			// new GLColor(1, 0, 0)).addChild(
			// new GLNode().addTransform(new GLColor(0, 1, 0)).addTransform(
			// new Translate(3, 3, 3)).addTransform(
			// new Scale(1.0, 5.0, 1.0)).addShape(new GLSphere()));
			viewer.setRootNode(topNode);

		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
}
